// Parse Tree
digraph {
	graph [rankdir=TB splines=true]
	node0 [label=Program fillcolor=lightgray shape=ellipse style=filled]
	node1 [label=FunctionDefinition fillcolor=lightgray shape=ellipse style=filled]
	node2 [label="KEYWORD
(\"int\")" fillcolor=lightblue shape=box style=filled]
	node1 -> node2
	node3 [label="IDENTIFIER
(\"main\")" fillcolor=lightblue shape=box style=filled]
	node1 -> node3
	node4 [label="SEPARATOR
(\"(\")" fillcolor=lightblue shape=box style=filled]
	node1 -> node4
	node5 [label=Parameters fillcolor=lightgray shape=ellipse style=filled]
	node1 -> node5
	node6 [label="SEPARATOR
(\")\")" fillcolor=lightblue shape=box style=filled]
	node1 -> node6
	node7 [label="SEPARATOR
(\"{\")" fillcolor=lightblue shape=box style=filled]
	node1 -> node7
	node8 [label=FunctionBody fillcolor=lightgray shape=ellipse style=filled]
	node9 [label=Statement fillcolor=lightgray shape=ellipse style=filled]
	node10 [label=ExpressionStatement fillcolor=lightgray shape=ellipse style=filled]
	node11 [label=Expression fillcolor=lightgray shape=ellipse style=filled]
	node12 [label="STRING
(\"\"This is a very long string that will overflow the buffer.\"\")" fillcolor=lightblue shape=box style=filled]
	node11 -> node12
	node13 [label="SEPARATOR
(\";\")" fillcolor=lightblue shape=box style=filled]
	node11 -> node13
	node10 -> node11
	node14 [label="SEPARATOR
(\";\")" fillcolor=lightblue shape=box style=filled]
	node10 -> node14
	node9 -> node10
	node8 -> node9
	node15 [label=Statement fillcolor=lightgray shape=ellipse style=filled]
	node16 [label="NUMBER
(\"0\")" fillcolor=lightblue shape=box style=filled]
	node15 -> node16
	node17 [label=Expression fillcolor=lightgray shape=ellipse style=filled]
	node18 [label="SEPARATOR
(\";\")" fillcolor=lightblue shape=box style=filled]
	node17 -> node18
	node15 -> node17
	node19 [label="SEPARATOR
(\";\")" fillcolor=lightblue shape=box style=filled]
	node15 -> node19
	node8 -> node15
	node20 [label="SEPARATOR
(\"}\")" fillcolor=lightblue shape=box style=filled]
	node8 -> node20
	node1 -> node8
	node0 -> node1
}
